environment:
  DYNAMODB_POST_TABLE: "${self:service}-${self:provider.stage}-post"
  DYNAMODB_USER_TABLE: "${self:service}-${self:provider.stage}-user"
  DYNAMODB_DESTINATION_TABLE: "${self:service}-${self:provider.stage}-destination"
  REGION: ${self:provider.region}
  STAGE: ${self:provider.stage}
#  ES_ENDPOINT:
#    Fn::GetAtt: [ ElasticSearchInstance , DomainEndpoint ]
  S3_UPLOAD_BUCKET: ${self:custom.s3_upload.bucket}
  S3_UPLOAD_URL_DEFAULT_TTL: ${self:custom.s3_upload.url_default_ttl}
  VPC_SECURITY_GROUP: "VPC_SECURITY_GROUP"
  VPC_SUBNET_PUBLIC_1: "VPC_SUBNET_PUBLIC_1"
  VPC_SUBNET_PUBLIC_2: "VPC_SUBNET_PUBLIC_2"
  CLOUDWATCH_NAMESPACE: "skeleton/${self:provider.stage}"
  COGNITO_POOL_ID: "eu-west-1_54KL2hCxM"
  COGNITO_ARN: "arn:aws:cognito-idp:eu-west-1:995277725002:userpool/eu-west-1_54KL2hCxM"

custom:
  documentation: ${file(config/resource/documentation.yml):documentation}
  s3_upload:
    bucket: ${self:service}-${self:provider.stage}-upload
    url_default_ttl: "300"
  dynamodb:
    DYNAMODB_POST_TABLE:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoveryEnabled: false
    DYNAMODB_USER_TABLE:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoveryEnabled: false
    DYNAMODB_DESTINATION_TABLE:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoveryEnabled: false
  es:
    ElasticsearchClusterConfig:
      InstanceType: t2.small.elasticsearch
      InstanceCount: 1
  pythonRequirements:
    dockerizePip: true
    fileName: requirements.txt

functions: ${file(config/resource/functions.yml):functions}

#authorizer:
#  type: COGNITO_USER_POOLS
#  authorizerId:
#    Ref: ApiGatewayAuthorizer

authorizer:
  arn: "arn:aws:cognito-idp:eu-west-1:995277725002:userpool/eu-west-1_54KL2hCxM"