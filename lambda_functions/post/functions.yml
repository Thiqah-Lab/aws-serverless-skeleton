post_get:
  handler: lambda_functions/post/post.get
  events:
    - http:
        path: post/{id}
        method: get
        cors: true
        authorizer: ${file(config/${self:provider.stage}-env.yml):authorizer}
        documentation:
          description: Get post request by id
          tags:
            - SKELETON_Post

post_create:
  handler: lambda_functions/post/post.create
  events:
    - http:
        path: post
        method: post
        cors: true
#        authorizer: ${file(config/${self:provider.stage}-env.yml):authorizer}
        request:
          schemas:
            application/json:
              schema: ${file(validator/create_request.json)}
              name: PostCreateModel
              description: 'Validation model for Creating Posts'

post_list:
  handler: lambda_functions/post/post.list
  events:
    - http:
        path: post
        method: get
        cors: true
#        authorizer: ${file(config/${self:provider.stage}-env.yml):authorizer}
        documentation:
          description: Get all posts.
          tags:
            - SKELETON_Post

post_delete:
  handler: lambda_functions/post/post.list
  events:
    - http:
        path: post/{id}
        method: delete
        cors: true
#        authorizer: ${file(config/${self:provider.stage}-env.yml):authorizer}
        documentation:
          description: Delete post by id (for admin only).
          tags:
            - SKELETON_Post

post_update:
  handler: lambda_functions/post/post.list
  events:
    - http:
        path: post/{id}
        method: put
        cors: true
#        authorizer: ${file(config/${self:provider.stage}-env.yml):authorizer}
        documentation:
          description: Update post by id (for admin only).
          tags:
            - SKELETON_Post
